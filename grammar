// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers (classDeclaration | interfaceDeclaration)

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

interfaceDeclaration ::= INTERFACE IDENTIFIER
                          [EXTENDS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                          interfaceBody

interfaceBody ::= LCURLY {modifiers interfaceMemberDecl} RCURLY

interfaceMemberDecl ::= (VOID | type) IDENTIFIER  // method
                        formalParameters
                        SEMI
                      | type variableDeclarators SEMI // field

classDeclaration ::= CLASS IDENTIFIER
                       [EXTENDS qualifiedIdentifier]
                       [IMPLEMENTS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                       classBody

classBody ::= LCURLY {
                ;
                | STATIC block
                | block
                | modifiers memberDecl
                }
              RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement
            | FOR LPAREN localVariableDeclarationStatement expression SEMI assignmentExpression RPAREN statement
            | FOR LPAREN formalParameter COLON IDENTIFIER RPAREN statement
            | RETURN [expression] SEMI
            | SEMI
            | statementExpression SEMI
            | TRY statement CATCH parException statement [FINALLY statement]

parException ::= LPAREN formalParameter RPAREN

formalParameters ::= LPAREN
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]

variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY
                       [variableInitializer
                         {COMMA variableInitializer} [COMMA]]
                     RCURLY

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | DOUBLE

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression


assignmentExpression ::= ternaryExpression  // must be a valid lhs, level 13
                           [(ASSIGN | PLUS_ASSIGN| MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | REM_ASSIGN) assignmentExpression]


ternaryExpression ::= conditionalOrExpression // level 12, right-to-left associative
                        [CONDITIONAL conditionalOrExpression
                        COLON ternaryExpression]

conditionalOrExpression ::= conditionalAndExpression // level 10
                               {LOR conditionalAndExpression}

conditionalAndExpression ::= bitwiseOr // level 10
                               {LAND bitwiseOr}

bitwiseOr ::= bitwiseXor // level 9
                {BITWISE_OR bitwiseXor}

bitwiseXor ::= bitwiseAnd // level 8
                {BITWISE_XOR bitwiseAnd}

bitwiseAnd ::= equalityExpression // level 7
                {BITWISE_AND equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {EQUAL | NOT EQUAL relationalExpression}

relationalExpression ::= bitwiseShiftExpression       // level 5
                           [(GT | LE | LESS | GTE) bitwiseShiftExpression
                           | INSTANCEOF referenceType]

bitwiseShiftExpression ::=  additiveExpression       // level 4
                     {(SHL | SHR | USHR) additiveExpression}

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | MOD) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | DEC unaryExpression
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | UNARY_COMP unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression

postfixExpression ::= primary {selector} {DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments
                  | DOT IDENTIFIER [arguments]
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier)
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | DOUBLE_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL
